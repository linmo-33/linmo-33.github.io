<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Ajax小结</title>
      <link href="/2023/03/16/Ajax%E5%B0%8F%E7%BB%93/"/>
      <url>/2023/03/16/Ajax%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="AJAX技术"><a href="#AJAX技术" class="headerlink" title="AJAX技术"></a>AJAX技术</h1><ul><li>ajax是浏览器提供的一系列api，可供javascript调用，实现代码控制请求与相应，实现网络编程</li></ul><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()  <span class="comment">//类似于开启用户代理</span></span><br><span class="line"><span class="comment">//初始化，请求了代理对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">readyState</span>) <span class="comment">//0, UNSENT</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;/text.php&#x27;</span>)    <span class="comment">//类似于输入地址与方法</span></span><br><span class="line"><span class="comment">//调用了open方法，建立了客户端与服务端的特定端口的连接</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">readyState</span>) <span class="comment">//1, OPENED</span></span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="literal">null</span>)  <span class="comment">// 类似于按下确认键, 参数为请求体</span></span><br><span class="line"><span class="comment">//由于ajax请求可能需要花费比较长时间来获取响应数据，但是不能让用户等待，因此设计初衷就是异步，即类似用事件的形式</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">switch</span>(<span class="variable language_">this</span>.<span class="property">readyState</span>)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: </span><br><span class="line">            <span class="comment">//已经获取到了响应报文的响应头</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">readyState</span>) <span class="comment">//2, HEADERS_RECEIVED</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">getAllResponseHeaders</span>)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)   <span class="comment">//没有数据</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="comment">//正在下载响应体中的数据</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">readyState</span>) <span class="comment">//3, LOADING</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)   <span class="comment">//数据有可能完整也有可能不完整，与响应体大小跟网速有关</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="comment">//响应体中的数据下载完成</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">readyState</span>) <span class="comment">//4, LOADED</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)   <span class="comment">//数据完整</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;    <span class="comment">//HTML5, XHR v2.0发布事件</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">readyState</span>)     <span class="comment">//4</span></span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><ul><li><code>xhr.responseText</code>永远只会获取字符串形式的响应体</li><li><code>xhr.response</code>根据content-type的变化而变化</li></ul><h2 id="遵循http协议"><a href="#遵循http协议" class="headerlink" title="遵循http协议"></a>遵循http协议</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">readyState</span>) </span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;/text.php&#x27;</span>)    </span><br><span class="line"><span class="comment">//响应头中的content-type必须与请求体中的格式相同，否则服务端无法解析</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;content-type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)  <span class="comment">//设置响应头</span></span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&#x27;name1=value1&amp;name2=value2&#x27;</span>)   <span class="comment">//设置urlencoded的请求体</span></span><br><span class="line"></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">readyState</span> != <span class="number">4</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">status</span>)    <span class="comment">//状态码</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">responseText</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h2><ul><li><code>xhr.open</code>的第三个参数是async，默认为true，用来控制xhr是否以异步形式发送请求</li><li>当以同步形式调用时，javascript会在<code>xhr.send</code>执行后直到收到响应为止进行等待</li></ul><h2 id="响应数据格式"><a href="#响应数据格式" class="headerlink" title="响应数据格式"></a>响应数据格式</h2><ul><li>影响到客户端的javascript如何对服务端返回的数据进行解析</li><li>服务端需要设置合理的content-type来决定客户端如何对其进行解析</li></ul><h3 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h3><ul><li>响应头为application&#x2F;xml</li><li>从responseXML中获取，且能通过dom操作来操作xml</li></ul><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><ul><li>响应头为application&#x2F;json</li></ul><h2 id="兼容方案"><a href="#兼容方案" class="headerlink" title="兼容方案"></a>兼容方案</h2><ul><li>对于IE5&#x2F;6需要使用兼容方案<br><code>xhr = XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject(&#39;microsoft.XMLHTTP&#39;)</code></li></ul><h2 id="jQuery中的封装"><a href="#jQuery中的封装" class="headerlink" title="jQuery中的封装"></a>jQuery中的封装</h2><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//底层接口</span></span><br><span class="line">$.<span class="title function_">ajax</span>(<span class="string">&#x27;text/php&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>，    <span class="comment">//method</span></span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,   <span class="comment">//响应体格式, 与data参数无关</span></span><br><span class="line">    <span class="attr">data</span>: obj,      <span class="comment">//响应体</span></span><br><span class="line">    <span class="attr">beforeSend</span>: <span class="keyword">function</span>(<span class="params">xhr</span>)&#123;</span><br><span class="line">        <span class="comment">//在open之前执行此回调</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">        <span class="comment">//res会自动根据服务端响应的content-type自动转换成对象</span></span><br><span class="line">        <span class="comment">//当设置了dataType时，不再由服务端决定而是按照dataType值来转换成对象</span></span><br><span class="line">    &#125;,    <span class="comment">//成功接收到响应体后回调，即status为200</span></span><br><span class="line">    <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">xhr</span>)&#123;</span><br><span class="line">        <span class="comment">//当状态码不为200时执行</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">complete</span>: <span class="keyword">function</span>(<span class="params">xhr</span>)&#123;</span><br><span class="line">        <span class="comment">//与状态码无关</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//get</span></span><br><span class="line">$.<span class="title function_">get</span>(<span class="string">&#x27;test.json&#x27;</span>, [data], callback)</span><br><span class="line"><span class="comment">//post</span></span><br><span class="line">$.<span class="title function_">post</span>(<span class="string">&#x27;test.json&#x27;</span>, [data], callback)</span><br><span class="line">$.<span class="title function_">postJson</span>(<span class="string">&#x27;test.json&#x27;</span>, [data], callback)   <span class="comment">//设置dataType=&quot;json&quot;</span></span><br></pre></td></tr></table></figure><h4 id="selector-load-url-data-callback"><a href="#selector-load-url-data-callback" class="headerlink" title="$(selector).load(url, [data, [callback]])"></a>$(selector).load(url, [data, [callback]])</h4><ul><li>载入远程 HTML 文件代码并插入至 DOM 中。</li><li>默认使用 GET 方式 - 传递附加参数时自动转换为 POST 方式。jQuery 1.2 中，可以指定选择符，来筛选载入的 HTML 文档，DOM 中将仅插入筛选出的 HTML 代码。语法形如 “url #some &gt; selector”。</li></ul><h3 id="ajax全局事件"><a href="#ajax全局事件" class="headerlink" title="ajax全局事件"></a>ajax全局事件</h3><ul><li><p>当指定选择器中有ajax调用时则触发此事件</p><p>ajaxStart(callback) </p><p>ajaxSend(callback)</p><p>ajaxStop(callback)</p><p>ajaxError(callback)</p><p>ajaxComplete(callback)</p><p>ajaxSuccess(callback)</p></li></ul><h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><ul><li>两个url必须协议，域名，端口都相等才属于同源，由于安全问题，默认只有同源的地址才能通过ajax来访问</li><li>不同源地址之间如果需要相互请求，必须服务端与客户端配合</li></ul><h3 id="跨域请求"><a href="#跨域请求" class="headerlink" title="跨域请求"></a>跨域请求</h3><h4 id="在html中有几个标签可以自动发送请求-img-link-script-iframe"><a href="#在html中有几个标签可以自动发送请求-img-link-script-iframe" class="headerlink" title="在html中有几个标签可以自动发送请求: img, link, script, iframe"></a>在html中有几个标签可以自动发送请求: img, link, script, iframe</h4><ol><li>img<ul><li>可以发送不同源的请求</li><li>无法拿到响应结果</li></ul></li><li>link<ul><li>可以发送不同源的请求</li><li>无法拿到响应结果</li></ul></li><li>script<ul><li>可以发送不同源的请求</li><li>无法拿到响应结果</li><li>但是会将响应数据当做javascript代码进行执行</li><li>可以利用这种特性来实现访问不同源的数据</li></ul></li><li>iframe<ul><li>可以发送不同源的请求</li><li>无法拿到响应结果</li></ul></li></ol><h4 id="封装JSONP"><a href="#封装JSONP" class="headerlink" title="封装JSONP"></a>封装JSONP</h4><p>浏览器代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">function</span> <span class="title function_">jsonp</span>(<span class="params">src, data, callback</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> symbolCode = <span class="string">&#x27;jsonp_&#x27;</span> + <span class="title class_">Date</span>.<span class="title function_">now</span>() + (<span class="title class_">Math</span>.<span class="title function_">random</span>()+<span class="string">&#x27;&#x27;</span>).<span class="title function_">slice</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> name <span class="keyword">in</span> data)&#123;</span><br><span class="line">        arr.<span class="title function_">push</span>(<span class="string">`<span class="subst">$&#123;name&#125;</span>=<span class="subst">$&#123;data[name]&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> obj = arr.<span class="title function_">join</span>(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">    script.<span class="property">src</span> = src + <span class="string">&#x27;?&#x27;</span>+ obj +<span class="string">&#x27;&amp;callback=&#x27;</span> + symbolCode </span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script)</span><br><span class="line">    <span class="variable language_">window</span>[symbolCode] = <span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="variable language_">window</span>[symbolCode] <span class="comment">//删除用作jsonp的函数</span></span><br><span class="line">      script.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(script) <span class="comment">//删除用作jsonp的script标签</span></span><br><span class="line">      <span class="title function_">callback</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">jsonp</span>(<span class="string">&#x27;http://localhost:4000&#x27;</span>,&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;aaaa&#x27;</span>&#125;, <span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>服务端代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> parsedurl = url.<span class="title function_">parse</span>(req.<span class="property">url</span>, <span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">if</span>(parsedurl.<span class="property">pathname</span> === <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;content-type&#x27;</span>, <span class="string">&#x27;application/javascript&#x27;</span>)</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">`<span class="subst">$&#123;parsedurl.query.callback&#125;</span>(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(parsedurl.query)&#125;</span>)`</span>)</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">4000</span>, <span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&#x27;500, server error&#x27;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;500, server error&#x27;</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;running at 4000...&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="跨域资源共享CORS-cross-origin-resouce-share"><a href="#跨域资源共享CORS-cross-origin-resouce-share" class="headerlink" title="跨域资源共享CORS(cross origin resouce share)"></a>跨域资源共享CORS(cross origin resouce share)</h4><ul><li>IE10及以上或者其他浏览器支持</li><li>需要开始只需要让服务端增加响应头access-control-allow-origin的值为<code>*</code>或者指定来源</li><li>当跨域请求为复杂请求时，会在正式通信前发出预检请求(preflight), 请求方法为option，服务器只有在这个请求的响应头中增加access-control-allow-origin才会允许跨域，否则浏览器报错</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6知识点总结</title>
      <link href="/2023/03/14/ES6/"/>
      <url>/2023/03/14/ES6/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>一般来说ECMAScript可以认为是javascript</li><li>javascript对ECMAScript进行了扩展</li></ul><h3 id="javascript组成"><a href="#javascript组成" class="headerlink" title="javascript组成"></a>javascript组成</h3><ul><li>ECMAScript(核心)</li><li>扩展–&gt;浏览器端<ul><li>DOM</li><li>BOM</li></ul></li><li>扩展–&gt;服务器端<ul><li>NODEJS</li></ul></li></ul><h2 id="ES版本变化"><a href="#ES版本变化" class="headerlink" title="ES版本变化"></a>ES版本变化</h2><ol><li>ES5 发布于2009年</li><li>ES6 发布于2015年</li><li>ES7 发布于2016年</li></ol><h2 id="回顾ES5"><a href="#回顾ES5" class="headerlink" title="回顾ES5"></a>回顾ES5</h2><h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3><h4 id="开启方式"><a href="#开启方式" class="headerlink" title="开启方式"></a>开启方式</h4><ul><li>以<code>use strict</code>开头来开启严格模式</li></ul><h4 id="行为与特性"><a href="#行为与特性" class="headerlink" title="行为与特性"></a>行为与特性</h4><ul><li>必须以var声明变量</li><li>自定义函数中的this不能指向window</li><li>给eval创建作用域</li><li>对象不能有重名属性</li></ul><h3 id="JSON扩展"><a href="#JSON扩展" class="headerlink" title="JSON扩展"></a>JSON扩展</h3><ul><li>JSON.stringify(obj&#x2F;arr)<ul><li>将JS对象或数组转换成JSON对象或数组</li></ul></li><li>JSON.parse(str)<ul><li>将JSON对象或数组转换成JS对象或数组</li></ul></li></ul><h3 id="Object扩展"><a href="#Object扩展" class="headerlink" title="Object扩展"></a>Object扩展</h3><ul><li>Object.create(prototype,[descriptors])<ol><li>作用：以第一个参数作为原型创建一个新的对象</li><li>为新的对象指定新的属性并修改它的描述<ol><li>value: 指定值</li><li>writable: 标识此属性是否可修改</li><li>configurable: 标识此属性是否可删除</li><li>enumerable: 标识当前属性是否可被for in枚举</li></ol></li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="title class_">Obect</span>.<span class="title function_">create</span>(obj1, &#123;</span><br><span class="line">    <span class="attr">sex</span>: &#123;</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">        <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">numerable</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>Object.defineProperties(prototype,[descriptors])<ol><li>作用：给第一个对象扩展新属性</li><li>为新的对象添加新的属性并修改它的描述<ol><li>get: 获取指定扩展属性时自动调用此函数，惰性加载，只有在触发时才执行此函数</li><li>set: 修改此属性时自动调用此函数并且将修改的值作为实参传递给此函数</li></ol></li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">firstname</span>: <span class="string">&#x27;aa&#x27;</span>, <span class="attr">lastname</span>: <span class="string">&#x27;bb&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(obj1, &#123;</span><br><span class="line">    <span class="attr">fullname</span>: &#123;</span><br><span class="line">        <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstname</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastname</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">firstname</span> = data.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">lastname</span> = data.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">fullname</span>)  <span class="comment">//aa bb</span></span><br><span class="line">obj2.<span class="property">fullname</span> = <span class="string">&quot;cc dd&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">fullname</span>)<span class="comment">//cc dd</span></span><br></pre></td></tr></table></figure><ul><li>对象中也有两个隐藏方法set与get，作用与defineProperty相同</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">firstname</span>: <span class="string">&#x27;aa&#x27;</span>, <span class="attr">lastname</span>: <span class="string">&#x27;bb&#x27;</span>,</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">fullname</span>()&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstname</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastname</span></span><br><span class="line">        &#125;,</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">fullname</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">firstname</span> = data.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">lastname</span> = data.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">fullname</span>)  <span class="comment">//aa bb</span></span><br><span class="line">obj1.<span class="property">fullname</span> = <span class="string">&quot;cc dd&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">fullname</span>)<span class="comment">//cc dd</span></span><br></pre></td></tr></table></figure><h3 id="数组的扩展"><a href="#数组的扩展" class="headerlink" title="数组的扩展"></a>数组的扩展</h3><ul><li>Array.prototype.indexOf(value)<ul><li>返回value在Array中第一次出现的下标</li></ul></li><li>Array.prototype.lastIndexOf(value)<ul><li>返回value在Array中第一次出现的下标</li></ul></li><li>Array.prototype.forEach(function(item, index, arr){})<ul><li>遍历整个数组</li></ul></li><li>Array.prototype.map(function(item, index){})<ul><li>遍历整个数组并将每个值按照回调函数的return的结果进行修改,返回值为修改好的数组</li></ul></li><li>Array.prototype.filter(function(item, index){})<ul><li>遍历整个数组并将每个值按照回调函数的return的结果进行过滤,不满足则丢弃,返回值为修改好的数组</li></ul></li></ul><h3 id="函数的扩展"><a href="#函数的扩展" class="headerlink" title="函数的扩展"></a>函数的扩展</h3><ul><li>Function.prototype.bind(obj)<ul><li>将函数内的this值修改为obj并将修改好的函数返回， 常用作为回调函数</li></ul></li><li>Function.prototype.call(obj, para1, para2…)<ul><li>立即调用函数并将函数内的this值修改为obj并将修改好的函数返回, 与apply区别在于参数不同</li></ul></li><li>Function.prototype.apply(obj, [para1, para2…])<ul><li>立即调用函数并将函数内的this值修改为obj并将修改好的函数返回</li></ul></li></ul><h2 id="ES6学习"><a href="#ES6学习" class="headerlink" title="ES6学习"></a>ES6学习</h2><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><ul><li>作用与var类似, 用于声明变量</li><li>特点：<ul><li>在块作用域里有效</li><li>不能重复声明</li><li>不会预处理, 不会发生提升</li></ul></li><li>应用：<ul><li>循环遍历加监听</li><li>取代var是趋势</li></ul></li></ul><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><ul><li>特点：<ul><li>值不能修改</li><li>其余与let相同</li></ul></li><li>应用：<ul><li>保存不需要修改的数据</li></ul></li></ul><h3 id="变量的解构赋值"><a href="#变量的解构赋值" class="headerlink" title="变量的解构赋值"></a>变量的解构赋值</h3><ul><li>从对象或者数组中提取数据并将其赋值给变量(多个)</li><li>给对象解构赋值<ul><li><code>let &#123;a,b&#125; = &#123;a: &#39;bbb&#39;, b: &#39;ccc&#39;&#125;</code></li><li>按照对象名来进行取值</li></ul></li><li>给数组解构赋值<ul><li><code>let [a,b] = [1, &#39;aaaa&#39;]</code></li><li>按照下标顺序赋值</li></ul></li><li>用途：<ul><li>给多个参数赋值</li></ul></li><li>应用给函数形参与实参</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">username</span>: <span class="string">&#x27;aa&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;ccc&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">&#123;username, value&#125;</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(username, value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(obj)</span><br></pre></td></tr></table></figure><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><ul><li>简化字符串的拼接</li><li>使用&#96;&#96;对字符串进行拼接</li><li>变量的部分使用${xxx}代替</li></ul><h3 id="对象的简写"><a href="#对象的简写" class="headerlink" title="对象的简写"></a>对象的简写</h3><ul><li>属性值与属性名相同时可以只写属性名</li><li>函数的function可以省略</li></ul><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><ul><li>定义匿名函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//箭头函数体左边的情况</span></span><br><span class="line"><span class="comment">//1.没有形参时</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">foo</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>)</span><br><span class="line"><span class="title function_">foo</span>()</span><br><span class="line"><span class="comment">//2.一个形参且没有形参默认值时(小括号能够省略)</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">foo</span> = a =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"><span class="title function_">foo</span>(<span class="string">&#x27;aa&#x27;</span>)</span><br><span class="line"><span class="comment">//3.两个及两个以上形参时，小括号不能省略</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">foo</span> = (<span class="params">a, b</span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b)</span><br><span class="line"><span class="title function_">foo</span>(<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>)</span><br><span class="line"><span class="comment">//箭头函数体右边的情况</span></span><br><span class="line"><span class="comment">//1.函数只有一条语句或者表达式时&#123;&#125;可以省略, 此时会自动返回语句执行结果或者表达式的结果</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">foo</span> = (<span class="params">a, b</span>) =&gt; a + b </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">foo</span>(<span class="number">1</span>,<span class="number">2</span>))<span class="comment">//3</span></span><br><span class="line"><span class="comment">//2.函数不止一条语句或者表达式时</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">foo</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">    a += <span class="string">&#x27;a&#x27;</span></span><br><span class="line">    b += <span class="string">&#x27;b&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">foo</span>(<span class="number">1</span>,<span class="number">2</span>))<span class="comment">//&#x27;1a2b&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>特点：<ul><li>简洁</li><li>箭头函数的this与谁调用无关，而是定义时所处对象的this<ul><li>扩展理解<ol><li>先看箭头函数外层有没有函数，有则为普通函数的this，没有就是window</li><li>如果外层也是箭头函数继续重复第一步的操作</li></ol></li></ul></li></ul></li></ul><h3 id="三点运算符"><a href="#三点运算符" class="headerlink" title="三点运算符"></a>三点运算符</h3><ul><li>又名Rest可变参数，常用来代替arguments(arguments.callee指函数本身)</li><li>它的值是真数组，与伪数组arguments不同</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">...value</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)  <span class="comment">//1,2,3,4,5</span></span><br><span class="line"><span class="comment">//当可变参数前也声明了形参时会自动从自己里剔除相应数量形参</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a, ...value</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)  <span class="comment">//2,3,4,5</span></span><br></pre></td></tr></table></figure><ul><li>扩展用法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">a = [<span class="number">1</span>, ...b, <span class="number">6</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)  <span class="comment">//[1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure><h3 id="形参默认值"><a href="#形参默认值" class="headerlink" title="形参默认值"></a>形参默认值</h3><ul><li>当未传入参数时使用形参里的默认值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">foo1</span> = (<span class="params">a=<span class="number">1</span></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">foo2</span> = a =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"><span class="title function_">foo1</span>()  <span class="comment">//1</span></span><br><span class="line"><span class="title function_">foo2</span>()  <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><h3 id="promise对象"><a href="#promise对象" class="headerlink" title="promise对象"></a>promise对象</h3><ul><li>promise对象: 代表了将来某个将要发生的事件(通常是异步操作)</li><li>有了promise对象，可以将异步操作以同步的流程表达出来，避免了层层嵌套的回调函数</li><li>ES6的Promise是个构造函数，用来生成promise实例</li><li>参数函数resolve的参数可以是另一个promise，此时当前promise会等待另一个promise状态发生改变时才继续执行</li><li>promise共有三个状态：<ul><li>pendding    初始化状态</li><li>fullfilled  成功状态</li><li>rejected    失败状态</li></ul></li><li>基本步骤</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建promise的实例</span></span><br><span class="line"><span class="keyword">let</span> url = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getNews</span>(<span class="params">url</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> xmlRequest = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>(url)</span><br><span class="line">    <span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// promise处于初始化状态</span></span><br><span class="line">        xmlRequest.<span class="property">onreadystatechange</span> = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(xmlRequest.<span class="property">readystate</span> === <span class="number">4</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(xmlRequest.<span class="property">state</span> === <span class="number">200</span>)&#123;</span><br><span class="line">                    xmlRequest.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, url)</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(xmlRequest.<span class="property">responseText</span>)</span><br><span class="line">                    <span class="comment">//  2. 指定进入成功状态时的回调函数的逻辑</span></span><br><span class="line">                    <span class="title function_">resolve</span>(xmlRequest.<span class="property">responseText</span>)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//  3. 指定进入失败状态时的回调函数的逻辑</span></span><br><span class="line">                    <span class="title function_">reject</span>(<span class="string">&#x27;失败了&#x27;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 返回promise以创建下一条链式调用</span></span><br><span class="line">    <span class="keyword">return</span> promise</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getNews</span>(url)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// fullfilled状态，步骤2中的回调函数</span></span><br><span class="line">        <span class="keyword">let</span> &#123;newUrl&#125; = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data)</span><br><span class="line">    <span class="comment">// 返回promise以继续创建下一条链式调用</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">getNews</span>(newUrl)  <span class="comment">// 重新创建了新的promise来重复执行函数getNews</span></span><br><span class="line">    &#125;, <span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// rejected状态，步骤3中的回调函数</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// fullfilled状态，步骤2中的回调函数</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;完成&#x27;</span>)</span><br><span class="line">    &#125;, <span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// rejected状态，步骤3中的回调函数</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span>=&gt;</span>&#123; <span class="comment">//通常不会给then指定第二个错误回调，而是使用catch方法来捕获错误</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">finally</span>(<span class="function">()=&gt;</span>&#123;&#125;) <span class="comment">//在执行完then或者catch回调后就执行，本质两者回调中的逻辑交集，发布于ES8</span></span><br></pre></td></tr></table></figure><h3 id="symbol"><a href="#symbol" class="headerlink" title="symbol"></a>symbol</h3><ul><li>在ES5中由于对象的属性名是个字符串，可能造成命名冲突<ul><li>比如想给别人创建的对象添加新属性时，新属性名可能与原属性名冲突，此时可用symbol解决</li></ul></li><li>在ES6中新增加的基本类型</li><li>表示一个独一无二的值，无法与其他值进行运算包括拼串</li><li>创建时不使用new运算符，因为它不是对象而是一个原始类型的值</li><li>不会被for in 与for of遍历到</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> symbol = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(symbol) <span class="comment">//symbol()</span></span><br><span class="line"><span class="comment">//可以传参作为它的标识符</span></span><br><span class="line"><span class="keyword">let</span> symbol1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;one&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(symbol) <span class="comment">//symbol(one)</span></span><br><span class="line"><span class="comment">//如果传入参数是一个对象则调用toString方法来作为标识符</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> symbol2 = <span class="title class_">Symbol</span>(obj)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(symbol) <span class="comment">//symbol(abc)</span></span><br></pre></td></tr></table></figure><h3 id="iterator遍历器"><a href="#iterator遍历器" class="headerlink" title="iterator遍历器"></a>iterator遍历器</h3><ul><li>是一个接口机制，为各种不同的数据结构提供统一的访问机制</li><li>作用：<ul><li>为各种数据结构提供一种统一简洁的接口</li><li>使得数据结构能按一定次序排列</li><li>ES6创造一种新的遍历方式for of，带有iterator接口的数据才能被遍历</li></ul></li><li>工作原理：<ul><li>创建一个指针对象(遍历器对象)，指向数据结构的起始位置</li><li>调用next方法，指针自动指向数据结构的第一个成员</li><li>继续调用next方法，指针指向下一个成员直到指向最后一个成员</li><li>每调用一个next方法返回一个对象包含value与done<ul><li>value表示当前的值，done表示是否遍历完成，布尔值</li><li>当遍历结束时(最后一个值的next)value为undefined，done返回true</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟遍历器接口</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">iterator</span> = (<span class="params">arr</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> index &gt;= arr.<span class="property">length</span>?&#123;<span class="attr">value</span>: arr[index], <span class="attr">done</span>: <span class="literal">false</span>&#125;:&#123;<span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将iterator接口部署到指定数据结构上，可以使用for of遍历</li><li>数组，字符串，arguments，map容器，set容器自带iterator接口</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> arr)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1,2,3,4,5</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;abcdefg&#x27;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> str)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//a,b,c,d,f,g</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a,b,c,d</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> <span class="variable language_">arguments</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)<span class="comment">//1,2,3,4</span></span><br></pre></td></tr></table></figure><ul><li>对对象使用for of时会调用对象内Symbol.iterator的函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给对象添加模拟遍历器</span></span><br><span class="line">obj = &#123;</span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()&#123; </span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">index</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">next</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">index</span>&lt;=<span class="number">3</span>?&#123;<span class="attr">value</span>: <span class="variable language_">this</span>.<span class="property">index</span>++, <span class="attr">done</span>: <span class="literal">false</span>&#125;:&#123;<span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="generator函数"><a href="#generator函数" class="headerlink" title="generator函数"></a>generator函数</h3><ul><li>ES6提供的解决异步编程的方案</li><li>它是个状态机，封装了各个阶段的数据</li><li>用来生成遍历器对象</li><li>创建时在function与函数名之间加星号表示generator函数</li><li>惰性加载，执行next才执行到函数内的yield语句处</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">myGenerator</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;开始执行&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> step1 = <span class="keyword">yield</span> <span class="string">&#x27;step1&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(step1)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;中断后重新执行&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;step2&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;完成&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;end&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行generator函数返回一个遍历器对象, 指向初始位置 </span></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">myGenerator</span>()    </span><br><span class="line"><span class="comment">//执行next方法使遍历器对象指向第一个yield处，yield语句的表达式结果就是value值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>())    <span class="comment">//&#x27;开始执行&#x27;    &#123;value: &#x27;step1&#x27;, done: false&#125;</span></span><br><span class="line"><span class="comment">//执行next方法使遍历器对象指向下一个yield处，yield语句的表达式结果就是value值</span></span><br><span class="line"><span class="comment">//可以给next传递实参，这个实参会赋值给执行此next方法时遍历器对象指向的起始yield语句的返回值，此处就是变量step1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&#x27;aaa&#x27;</span>))<span class="comment">//&#x27;aaa&#x27;    &#x27;中断后重新执行&#x27;  &#x27;step2&#x27;  &#123;value: &#x27;undefined&#x27;, done: false&#125;</span></span><br><span class="line"><span class="comment">//继续执行next会使返回的value与函数内return的表达式值相同</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>())<span class="comment">//&#x27;完成&#x27; &#123;value: &#x27;end&#x27;, done: true&#125;</span></span><br></pre></td></tr></table></figure><ul><li>加深generator函数是生成遍历器对象的印象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    *[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()&#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> obj)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="async函数"><a href="#async函数" class="headerlink" title="async函数"></a>async函数</h3><ul><li>ES7语法</li><li>真正意义上解决异步回调，同步流程表达异步操作</li><li>本质是generator的语法糖</li><li>async函数返回值为promise</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">await</span> 异步操作</span><br><span class="line">    <span class="keyword">await</span> 异步操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>例子</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getNews</span>(<span class="params">url</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(url === <span class="string">&#x27;aaa&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_">resolve</span>(url)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//参数函数的执行不会终止后续逻辑但是由于状态只会转变一次，因此回调需要二选一</span></span><br><span class="line">            <span class="title function_">resolve</span>(<span class="literal">false</span>)  <span class="comment">//此种回调可以让失败的逻辑交给async函数本身处理</span></span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;普通函数失败&#x27;</span>)  <span class="comment">//此种回调可以让失败逻辑交给async函数的then方法来执行</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> promise</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">getNews</span>(<span class="string">&#x27;bbb&#x27;</span>)   <span class="comment">//await后的函数只有promise为成功状态才会继续执行</span></span><br><span class="line">    <span class="comment">//此处的if判断是建立在上个函数调用resolve的基础上</span></span><br><span class="line">    <span class="keyword">if</span>(result===<span class="literal">false</span>)&#123; <span class="comment">//可以借用给resolve传递false来表示promise实际为fullfilled状态</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async函数失败&#x27;</span>) <span class="comment">//针对fullfilled状态需要执行的逻辑</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">//成功状态执行的逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">    result = <span class="keyword">await</span> <span class="title function_">getNews</span>(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;async函数成功&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//处理异步执行过程中发生的成功或者失败的逻辑</span></span><br><span class="line"><span class="title function_">test</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;   </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)   <span class="comment">//成功执行此处，data的值为async函数return的值</span></span><br><span class="line">&#125;,<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)  <span class="comment">//失败执行此处</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="class"><a href="#class" class="headerlink" title="class"></a>class</h3><ul><li>通过class定义类&#x2F;实现类的继承</li><li>在类中使用constructor来实现类的属性继承</li><li>使用函数简写的形式给类添加一个方法</li><li>子类使用extends继承父类</li><li>子类在constructor中使用super来调用父类继承的属性</li><li>子类可以通过父类的方法重写来实现调用自己的方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, age</span>)&#123; <span class="comment">//属性继承</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getName</span>(<span class="params"></span>)&#123;  <span class="comment">//创建父类方法</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>, <span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SalaryPerson</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, age, salary</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(name, age)    <span class="comment">//继承父类属性</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">salary</span> = salary</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getName</span>(<span class="params"></span>)&#123;  <span class="comment">//重写父类方法</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>, <span class="variable language_">this</span>.<span class="property">age</span>, <span class="variable language_">this</span>.<span class="property">salary</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> aPerson = <span class="keyword">new</span> <span class="title class_">SalaryPerson</span>(<span class="string">&#x27;aa&#x27;</span>, <span class="number">16</span>,<span class="number">2000</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aPerson)</span><br></pre></td></tr></table></figure><ul><li>本质是组合继承(构造函数继承+寄生继承)</li></ul><h3 id="字符串扩展"><a href="#字符串扩展" class="headerlink" title="字符串扩展"></a>字符串扩展</h3><ul><li><code>str.includes(str)</code> 判断是否包含指定字符串</li><li><code>str.startWith(str)</code> 判断是否以指定字符串开头</li><li><code>str.endWith(str)</code> 判断是否以指定字符串结尾</li><li><code>str.repeat(count)</code>   返回重复了指定次数的字符串</li></ul><h3 id="数值扩展"><a href="#数值扩展" class="headerlink" title="数值扩展"></a>数值扩展</h3><ul><li>二进制与八进制表示法：0b开头表示二进制，0o表示八进制</li><li><code>number.isFinite(i)</code> 判断是否是有限数</li><li><code>number.isNaN(i)</code> 判断是否是NaN</li><li><code>number.parseInt(str)</code> 字符串转化为整数</li><li><code>number.isInteger(i)</code> 判断是否是整数</li><li><code>Math.trunc(i)</code>   小数转化为整数</li></ul><h3 id="数组对象的扩展"><a href="#数组对象的扩展" class="headerlink" title="数组对象的扩展"></a>数组对象的扩展</h3><ul><li><code>Array.from(v)</code> 将伪数组转化为真数组</li><li><code>Array.of(v1,v2,v3)</code>  将一系列数据转化为数组</li><li><code>Array.find(function(item, index, arr)&#123;&#125;)</code>    找到满足条件的第一个值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尝试实现底层</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myfind</span> = <span class="keyword">function</span>(<span class="params">condition</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_">condition</span>(<span class="variable language_">this</span>[i], i))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Array.findIndex(function(item, index, arr)&#123;&#125;)</code>   找到满足条件的第一个值的下标</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尝试实现底层</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myfindIndex</span> = <span class="keyword">function</span>(<span class="params">condition</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_">condition</span>(<span class="variable language_">this</span>[i], i))&#123;</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象的扩展"><a href="#对象的扩展" class="headerlink" title="对象的扩展"></a>对象的扩展</h3><ul><li><code>Object.is(v1, v2)</code>   判断两个数据是否相等，底层是判断字符串</li><li><code>Object.assign(target, source, [source, source])</code> 将源对象的属性添加到目标对象上</li><li>从ES6开始__proto__可以被操作</li></ul><h3 id="深度克隆"><a href="#深度克隆" class="headerlink" title="深度克隆"></a>深度克隆</h3><ul><li>拷贝数据：<ul><li>基本数据类型<ul><li>拷贝后生成一份新的数据，修改新数据不会改变原数据的值</li></ul></li><li>对象&#x2F;数组<ul><li>拷贝后是传递原数据的引用地址，修改新数据会改变原数据的值</li></ul></li></ul></li><li>深拷贝：<ul><li>拷贝的不是引用地址</li></ul></li><li>浅拷贝：<ul><li>拷贝的是引用地址</li></ul></li><li>几种拷贝方法：<ol><li>直接赋值   浅拷贝</li><li>Object.assign()    浅拷贝</li><li>Array.prototype.concat() 浅拷贝</li><li>Array.prototype.slice() 浅拷贝</li><li>JSON.parse(JSON.stringify())   深拷贝, 但是内容中不能包括函数，否则是null</li></ol></li><li>深拷贝的实现要求<ul><li>拷贝的内容里不能有对象&#x2F;数组</li></ul></li><li>深拷贝的实现</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clone</span>(<span class="params">target</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> value = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_">checkedType</span>(target) === <span class="string">&#x27;Object&#x27;</span>)&#123;</span><br><span class="line">        value = &#123;&#125;  <span class="comment">//如果形参为对象则创建对象字面量</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="title function_">checkedType</span>(target) === <span class="string">&#x27;Array&#x27;</span>)&#123;</span><br><span class="line">        value = []  <span class="comment">//如果形参为数组则创建数组字面量</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> target</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> target)&#123;   <span class="comment">//遍历对象或者数组</span></span><br><span class="line">        value[i] = <span class="variable language_">arguments</span>.<span class="title function_">callee</span>(target[i])  <span class="comment">//递归调用判断对象或者数组中的值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">checkedType</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>) <span class="comment">//调用原型上纯净的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="set与map容器"><a href="#set与map容器" class="headerlink" title="set与map容器"></a>set与map容器</h3><h4 id="set容器"><a href="#set容器" class="headerlink" title="set容器"></a>set容器</h4><ul><li>无序的不可重复的多个value的集合体</li><li>Set(array)    将数组转化为set容器</li><li>set.add() </li><li>set.delete() </li><li>set.has() </li><li>set.clear()</li></ul><p>可用来解决数组内数据重复问题</p><h4 id="map容器"><a href="#map容器" class="headerlink" title="map容器"></a>map容器</h4><ul><li>无序的key不重复的多个key-value的集合体</li><li>Map(array)    将两维数组转化为map容器</li><li>map.set(key, value) </li><li>map.get(key) </li><li>map.delete(key) </li><li>map.has(key) </li><li>map.clear() </li><li>map.size</li></ul><h2 id="ES7新增"><a href="#ES7新增" class="headerlink" title="ES7新增"></a>ES7新增</h2><ul><li>指数运算符<code>**</code></li><li>Array.prototype.includes(value)   判断某个</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
